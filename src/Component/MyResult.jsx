import React, { useState, useEffect } from 'react';
import axios from 'axios';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas-pro';
import logo from '../assets/islamicStudieslogo.png'; 

function MyResult() {
  const [registrationNumber, setRegistrationNumber] = useState('');
  const [classRoll, setClassRoll] = useState('');
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');

const handleDownloadPDF = async () => {
  const input = document.getElementById('result-section');

  const screenWidth = window.innerWidth;
  const isMobile = screenWidth < 768;

  const canvas = await html2canvas(input, {
    scale: 2, // keep quality high
    useCORS: true,
    allowTaint: true,
    windowWidth: input.scrollWidth, // ensures full width capture
  });

  const imgData = canvas.toDataURL('image/png');
  const pdf = new jsPDF('p', 'mm', 'a4');

  const pdfWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();

  // Resize image to fit within PDF width
  const imgProps = pdf.getImageProperties(imgData);
  const imgWidth = pdfWidth - 20; // 10px padding on both sides
  const imgHeight = (imgProps.height * imgWidth) / imgProps.width;

  let heightLeft = imgHeight;
  let position = 20;

  // üñº Header (optional logo/text)
  const logoImg = new Image();
  logoImg.src = logo;
  await new Promise((resolve) => { logoImg.onload = resolve; });

  pdf.addImage(logoImg, 'PNG', 15, 10, 15, 15);
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Department of Arabic & Islamic Studies', pdfWidth / 2, 18, { align: 'center' });
  pdf.setFontSize(11);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Government City College, Chattogram', pdfWidth / 2, 24, { align: 'center' });

  position = 30; // set starting position after header

  // üìÑ Add content image (with page breaks if needed)
  if (heightLeft < pageHeight - position) {
    pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
  } else {
    while (heightLeft > 0) {
      pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
      heightLeft -= pageHeight - 20;
      if (heightLeft > 0) {
        pdf.addPage();
        position = 10;
      }
    }
  }

  // üìå Footer
  pdf.setFontSize(10);
  pdf.setTextColor(100);
  pdf.text('¬© Govt. City College, Ctg | Generated by Result Portal', pdfWidth / 2, pageHeight - 10, {
    align: 'center',
  });

  pdf.save('Student-Result.pdf');
};



  // üîÑ Load from localStorage if available
  useEffect(() => {
    const storedResult = localStorage.getItem('studentResult');
    if (storedResult) {
      setResult(JSON.parse(storedResult));
    }
  }, []);

  const handleSearch = async (e) => {
    e.preventDefault();
    setError('');
    setResult(null);

    if (!registrationNumber || !classRoll) {
      setError('Please provide both Registration Number and Class Roll');
      return;
    }

    try {
      const res = await axios.get(`${import.meta.env.VITE_API_URL}/api/results/result`, {
        params: {
          registrationNumber,
          classRoll,
        },
      });

      setResult(res.data);
      localStorage.setItem('studentResult', JSON.stringify(res.data));
    } catch (err) {
      if (err.response && err.response.status === 404) {
        setError('Result not found for this Registration Number and Class Roll');
      } else {
        setError('Server error occurred');
      }
    }
  };

  const handleReset = () => {
    setRegistrationNumber('');
    setClassRoll('');
    setResult(null);
    setError('');
    localStorage.removeItem('studentResult');
  };

  return (
    <div className="max-w-3xl mx-auto px-4 pb-12 lg:pt-28 pt-24 font-english">
      {!result ? (
        <div className="bg-white shadow-lg rounded-lg p-6">
          <h2 className="text-3xl font-bold text-blue-900 mb-4 text-center">üéì Student Result Portal</h2>
          <p className="text-gray-700 text-lg mb-6 text-center font-bangla">
            ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡¶≤‡ßá <span className='text-blue-800 font-semibold'>‡¶∞‡ßã‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞</span> ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
          </p>

          <form onSubmit={handleSearch} className="space-y-5">
            <div>
              <label className="block text-gray-700 font-medium mb-2">Registration Number</label>
              <input
                type="text"
                value={registrationNumber}
                onChange={(e) => setRegistrationNumber(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="e.g. 123456"
              />
            </div>

            <div>
              <label className="block text-gray-700 font-medium mb-2">Class Roll</label>
              <input
                type="text"
                value={classRoll}
                onChange={(e) => setClassRoll(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="e.g. 10"
              />
            </div>

            <button
              type="submit"
              className="w-full bg-blue-900 hover:bg-blue-700 text-white font-semibold py-2 rounded-md transition duration-200"
            >
              üîç Search Result
            </button>

            {error && <p className="text-red-600 text-sm mt-2">{error}</p>}
          </form>
        </div>
      ) : (
        <div id="result-section" className="bg-white shadow-lg rounded-lg p-6 max-w-3xl mx-auto border border-gray-300" >
          <h2 className="text-2xl font-bold text-blue-700 mb-4 text-center">üìÑ Student Result</h2>

       <div id="result-section">

              <div className="grid sm:grid-cols-2 gap-4 mb-6">
            <p><strong>Name:</strong> {result.studentName}</p>
            <p><strong>Reg. No:</strong> {result.registrationNumber}</p>
            <p><strong>Class Roll:</strong> {result.classRoll}</p>
            <p><strong>Department:</strong> {result.department}</p>
            <p><strong>Year:</strong> {result.year}</p>
            <p><strong>Exam Type:</strong> {result.examType}</p>
          </div>

          <div>
            <h3 className="text-xl font-semibold mb-2">üìö Subjects & Marks</h3>
            <div className="overflow-x-auto">
              <table className="w-full text-left border border-gray-300">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="border px-3 py-2">Subject Code</th>
                    <th className="border px-3 py-2">Subject</th>
                    <th className="border px-3 py-2">Marks</th>
                    <th className="border px-3 py-2">GPA</th>
                  </tr>
                </thead>
                <tbody>
                  {result.results?.map((sub, idx) => (
                    <tr key={idx}>
                      <td className="border px-3 py-2">{sub.subjectCode}</td>
                      <td className="border px-3 py-2">{sub.subject}</td>
                      <td className="border px-3 py-2">{sub.marks}</td>
                      <td className="border px-3 py-2">{(sub.gpa || 0).toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          <div className="mt-4 space-y-1">
            <p><strong>üìä Total Marks:</strong> {result.totalMarks}</p>
            <p><strong>üéØ Average CGPA:</strong> {(result.averageGpa || 0).toFixed(2)} out of 4.00</p>
            <p><strong>üèÖ Grade:</strong> {result.averageGrade}</p>
           </div>

       </div>
             

            <button
              onClick={handleDownloadPDF}
              className="mt-4 w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-2 rounded-md transition duration-200"
            >
              üì• Download PDF Marksheet
            </button>


          <button
            onClick={handleReset}
            className="mt-6 w-full bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 rounded-md transition duration-200"
          >
            üîÑ Search Another Result
          </button>
        </div>
      )}
    </div>
  );
}

export default MyResult;
